public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp = head;
        int totalNodes=0;
        if(head == null || head.next == null){
            head = null;
            return head;
        }
        while(temp != null){
            totalNodes += 1;
            temp = temp.next;
        }
        if(n == totalNodes){
            head=head.next;
            return head;
        }
        int nodeFromStart = totalNodes-n;
        ListNode traverse = head;
        int count=0;
        while(traverse!=null){
            count++;
            if(count == nodeFromStart){
                traverse.next = traverse.next.next;
            }
            traverse = traverse.next;
        }
        return head;
        
    }

//optimal using slow and fast pointer 
public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast = head;
        if(head == null || head.next== null){
            head = null;
            return head;
        }
        for(int i = 0 ; i < n; i++)
        {
            fast=fast.next;
        }
        if(fast==null){
            head=head.next;
            return head;
        }
        ListNode slow = head;
        while(fast.next!=null){
            slow=slow.next;
            fast=fast.next;
        }
        slow.next=(slow.next!=null)? slow.next.next : null;
        return head;
    }
